'''
  Database.py

  Description:
  Chamber variables

  Author:  Gonzalo
  Date:   19/01/2014

  Last update 22/04/2014 <- Gonzalo
'''


import Sequences
import numpy
import math

FT    = lambda x: numpy.fft. fft2( x )
IFT   = lambda x: numpy.fft.ifft2( x )
SHFT  = lambda x: numpy.fft. fftshift(  FT(x) )
SHIFT = lambda x: numpy.fft. fftshift( IFT(x) )

SiPM_map = {
1000 : [-5., 5. ],
1001 : [-15., 5. ],
1002 : [-25., 5. ],
1003 : [-35., 5. ],
1004 : [-45., 5. ],
1005 : [-55., 5. ],
1006 : [-65., 5. ],
1007 : [-75., 5. ],
1008 : [-5., 15. ],
1009 : [-15., 15. ],
1010 : [-25., 15. ],
1011 : [-35., 15. ],
1012 : [-45., 15. ],
1013 : [-55., 15. ],
1014 : [-65., 15. ],
1015 : [-75., 15. ],
1016 : [-5., 25. ],
1017 : [-15., 25. ],
1018 : [-25., 25. ],
1019 : [-35., 25. ],
1020 : [-45., 25. ],
1021 : [-55., 25. ],
1022 : [-65., 25. ],
1023 : [-75., 25. ],
1024 : [-5., 35. ],
1025 : [-15., 35. ],
1026 : [-25., 35. ],
1027 : [-35., 35. ],
1028 : [-45., 35. ],
1029 : [-55., 35. ],
1030 : [-65., 35. ],
1031 : [-75., 35. ],
1032 : [-5., 45. ],
1033 : [-15., 45. ],
1034 : [-25., 45. ],
1035 : [-35., 45. ],
1036 : [-45., 45. ],
1037 : [-55., 45. ],
1038 : [-65., 45. ],
1039 : [-75., 45. ],
1040 : [-5., 55. ],
1041 : [-15., 55. ],
1042 : [-25., 55. ],
1043 : [-35., 55. ],
1044 : [-45., 55. ],
1045 : [-55., 55. ],
1046 : [-65., 55. ],
1047 : [-75., 55. ],
1048 : [-5., 65. ],
1049 : [-15., 65. ],
1050 : [-25., 65. ],
1051 : [-35., 65. ],
1052 : [-45., 65. ],
1053 : [-55., 65. ],
1054 : [-65., 65. ],
1055 : [-75., 65. ],
1056 : [-5., 75. ],
1057 : [-15., 75. ],
1058 : [-25., 75. ],
1059 : [-35., 75. ],
1060 : [-45., 75. ],
1061 : [-55., 75. ],
1062 : [-65., 75. ],
1063 : [-75., 75. ],
1064 : [75., 5. ],
1065 : [65., 5. ],
1066 : [55., 5. ],
1067 : [45., 5. ],
1068 : [35., 5. ],
1069 : [25., 5. ],
1070 : [15., 5. ],
1071 : [5., 5. ],
1072 : [75., 15. ],
1073 : [65., 15. ],
1074 : [55., 15. ],
1075 : [45., 15. ],
1076 : [35., 15. ],
1077 : [25., 15. ],
1078 : [15., 15. ],
1079 : [5., 15. ],
1080 : [75., 25. ],
1081 : [65., 25. ],
1082 : [55., 25. ],
1083 : [45., 25. ],
1084 : [35., 25. ],
1085 : [25., 25. ],
1086 : [15., 25. ],
1087 : [5., 25. ],
1088 : [75., 35. ],
1089 : [65., 35. ],
1090 : [55., 35. ],
1091 : [45., 35. ],
1092 : [35., 35. ],
1093 : [25., 35. ],
1094 : [15., 35. ],
1095 : [5., 35. ],
1096 : [75., 45. ],
1097 : [65., 45. ],
1098 : [55., 45. ],
1099 : [45., 45. ],
1100 : [35., 45. ],
1101 : [25., 45. ],
1102 : [15., 45. ],
1103 : [5., 45. ],
1104 : [75., 55. ],
1105 : [65., 55. ],
1106 : [55., 55. ],
1107 : [45., 55. ],
1108 : [35., 55. ],
1109 : [25., 55. ],
1110 : [15., 55. ],
1111 : [5., 55. ],
1112 : [75., 65. ],
1113 : [65., 65. ],
1114 : [55., 65. ],
1115 : [45., 65. ],
1116 : [35., 65. ],
1117 : [25., 65. ],
1118 : [15., 65. ],
1119 : [5., 65. ],
1120 : [75., 75. ],
1121 : [65., 75. ],
1122 : [55., 75. ],
1123 : [45., 75. ],
1124 : [35., 75. ],
1125 : [25., 75. ],
1126 : [15., 75. ],
1127 : [5., 75. ],
1128 : [-75., -5. ],
1129 : [-65., -5. ],
1130 : [-55., -5. ],
1131 : [-45., -5. ],
1132 : [-35., -5. ],
1133 : [-25., -5. ],
1134 : [-15., -5. ],
1135 : [-5., -5. ],
1136 : [-75., -15. ],
1137 : [-65., -15. ],
1138 : [-55., -15. ],
1139 : [-45., -15. ],
1140 : [-35., -15. ],
1141 : [-25., -15. ],
1142 : [-15., -15. ],
1143 : [-5., -15. ],
1144 : [-75., -25. ],
1145 : [-65., -25. ],
1146 : [-55., -25. ],
1147 : [-45., -25. ],
1148 : [-35., -25. ],
1149 : [-25., -25. ],
1150 : [-15., -25. ],
1151 : [-5., -25. ],
1152 : [-75., -35. ],
1153 : [-65., -35. ],
1154 : [-55., -35. ],
1155 : [-45., -35. ],
1156 : [-35., -35. ],
1157 : [-25., -35. ],
1158 : [-15., -35. ],
1159 : [-5., -35. ],
1160 : [-75., -45. ],
1161 : [-65., -45. ],
1162 : [-55., -45. ],
1163 : [-45., -45. ],
1164 : [-35., -45. ],
1165 : [-25., -45. ],
1166 : [-15., -45. ],
1167 : [-5., -45. ],
1168 : [-75., -55. ],
1169 : [-65., -55. ],
1170 : [-55., -55. ],
1171 : [-45., -55. ],
1172 : [-35., -55. ],
1173 : [-25., -55. ],
1174 : [-15., -55. ],
1175 : [-5., -55. ],
1176 : [-75., -65. ],
1177 : [-65., -65. ],
1178 : [-55., -65. ],
1179 : [-45., -65. ],
1180 : [-35., -65. ],
1181 : [-25., -65. ],
1182 : [-15., -65. ],
1183 : [-5., -65. ],
1184 : [-75., -75. ],
1185 : [-65., -75. ],
1186 : [-55., -75. ],
1187 : [-45., -75. ],
1188 : [-35., -75. ],
1189 : [-25., -75. ],
1190 : [-15., -75. ],
1191 : [-5., -75. ],
1192 : [5., -5. ],
1193 : [15., -5. ],
1194 : [25., -5. ],
1195 : [35., -5. ],
1196 : [45., -5. ],
1197 : [55., -5. ],
1198 : [65., -5. ],
1199 : [75., -5. ],
1200 : [5., -15. ],
1201 : [15., -15. ],
1202 : [25., -15. ],
1203 : [35., -15. ],
1204 : [45., -15. ],
1205 : [55., -15. ],
1206 : [65., -15. ],
1207 : [75., -15. ],
1208 : [5., -25. ],
1209 : [15., -25. ],
1210 : [25., -25. ],
1211 : [35., -25. ],
1212 : [45., -25. ],
1213 : [55., -25. ],
1214 : [65., -25. ],
1215 : [75., -25. ],
1216 : [5., -35. ],
1217 : [15., -35. ],
1218 : [25., -35. ],
1219 : [35., -35. ],
1220 : [45., -35. ],
1221 : [55., -35. ],
1222 : [65., -35. ],
1223 : [75., -35. ],
1224 : [5., -45. ],
1225 : [15., -45. ],
1226 : [25., -45. ],
1227 : [35., -45. ],
1228 : [45., -45. ],
1229 : [55., -45. ],
1230 : [65., -45. ],
1231 : [75., -45. ],
1232 : [5., -55. ],
1233 : [15., -55. ],
1234 : [25., -55. ],
1235 : [35., -55. ],
1236 : [45., -55. ],
1237 : [55., -55. ],
1238 : [65., -55. ],
1239 : [75., -55. ],
1240 : [5., -65. ],
1241 : [15., -65. ],
1242 : [25., -65. ],
1243 : [35., -65. ],
1244 : [45., -65. ],
1245 : [55., -65. ],
1246 : [65., -65. ],
1247 : [75., -65. ],
1248 : [5., -75. ],
1249 : [15., -75. ],
1250 : [25., -75. ],
1251 : [35., -75. ],
1252 : [45., -75. ],
1253 : [55., -75. ],
1254 : [65., -75. ],
1255 : [75., -75. ]}

PMT_map = {
20 : [34.59, 59.92],
21 : [0., 59.92],
22 : [-34.59, 59.92],
23 : [51.89, 29.96],
24 : [17.29, 29.96],
25 : [-17.29, 29.96],
26 : [-51.89, 29.96],
27 : [69.189, 0],
28 : [34.59, 0],
29 : [0.0, 0.0],
30 : [-34.59, 0],
31 : [-69.189, 0],
32 : [51.89, -29.96],
33 : [17.29, -29.96],
34 : [-17.29, -29.96],
35 : [-51.89, -29.96],
36 : [34.59, -59.92],
37 : [0.0, -59.92],
39 : [-34.59, -59.92]}

PMT_mean = {
20 : 431.425,
21 : 476.391,
22 : 490.000,
23 : 469.866,
24 : 496.695,
25 : 554.227,
26 : 508.210,
27 : 430.314,
28 : 474.456,
29 : 522.429,
30 : 545.924,
31 : 477.949,
32 : 517.211,
33 : 514.691,
34 : 504.406,
35 : 451.523,
36 : 515.149,
37 : 497.251,
39 : 433.291}

PMT_RMS = {
20 : 72.2990,
21 : 77.1762,
22 : 78.1896,
23 : 77.4126,
24 : 78.5415,
25 : 78.9744,
26 : 80.8666,
27 : 71.7533,
28 : 76.7502,
29 : 79.2596,
30 : 79.6196,
31 : 81.3594,
32 : 81.9559,
33 : 79.0830,
34 : 76.9468,
35 : 76.4831,
36 : 81.8641,
37 : 78.4651,
39 : 72.1146}

ids, rms = zip(*sorted(PMT_RMS.items()))
ws  = [x**-2 for x in rms ]
sws = sum(ws)
nws = [ w/sws for w in ws ]
PMT_weights = dict(zip(ids,nws))
PMT_weights = { i : 1/19. for i in ids }
'''
PMT_variances = {
20 : 5227.14540100,
21 : 5956.16584644,
22 : 6113.61354816,
23 : 5992.71063876,
24 : 6168.76722225,
25 : 6236.95585536,
26 : 6539.40699556,
27 : 5148.53606089,
28 : 5890.59320004,
29 : 6282.08419216,
30 : 6339.28070416,
31 : 6619.35196836,
32 : 6716.76954481,
33 : 6254.12088900,
34 : 5920.81003024,
35 : 5849.66458561,
36 : 6701.73086881,
37 : 6156.77191801,
39 : 5200.51553316}

PMT_weights = {
20 : 0.0696528116692,
21 : 0.0536456176578,
22 : 0.0509180599845,
23 : 0.0529933284338,
24 : 0.0500116345388,
25 : 0.0489240581364,
26 : 0.0445031834779,
27 : 0.0717960077934,
28 : 0.0548466050639,
29 : 0.0482236755733,
30 : 0.0473573997156,
31 : 0.0434347039115,
32 : 0.0421839184205,
33 : 0.0486558731474,
34 : 0.0542882147234,
35 : 0.0556167855247,
36 : 0.0423734521632,
37 : 0.0502067007781,
39 : 0.0703679692866}
#20 : 1.323403421720,
#21 : 1.019266735500,
#22 : 0.967443139706,
#23 : 1.006873240240,
#24 : 0.950221056236,
#25 : 0.929557104592,
#26 : 0.845560486080,
#27 : 1.364124148070,
#28 : 1.042085496210,
#29 : 0.916249835894,
#30 : 0.899790594596,
#31 : 0.825259374319,
#32 : 0.801494449990,
#33 : 0.924461589800,
#34 : 1.031476079740,
#35 : 1.056718924970,
#36 : 0.805095591101,
#37 : 0.953927314784,
#39 : 1.336991416440}
'''
'''
PMT_weights = {
20 : 1./19.,
21 : 1./19.,
22 : 1./19.,
23 : 1./19.,
24 : 1./19.,
25 : 1./19.,
26 : 1./19.,
27 : 1./19.,
28 : 1./19.,
29 : 1./19.,
30 : 1./19.,
31 : 1./19.,
32 : 1./19.,
33 : 1./19.,
34 : 1./19.,
35 : 1./19.,
36 : 1./19.,
37 : 1./19.,
39 : 1./19.}
'''

ZFIRST      = 90.
ZLAST       = 290.
ZMAX        = 300.
RMAX        = 100.
NSIPMS      = 250
NPMTS       = 19
QSIPMCUTREL = .1
QSIPMCUTABS = 8.


R0corona    = 15.
Phi0corona  = math.pi / 8
CoronaCorrection = {
1  : 1.0           ,
2  : 0.994121271303,
3  : 0.996589687693,
4  : 1.00426023236 ,
5  : 1.01556547125 ,
6  : 1.03155583238 ,
7  : 1.04385509252 ,
8  : 1.06050923331 ,
9  : 1.07798359909 ,
10 : 1.1019939762  ,
11 : 1.1244337752  ,
12 : 1.15915486255 ,
13 : 1.16806026545 ,
14 : 1.20007614495 ,
15 : 1.22878331101 ,
16 : 1.2587183469  ,
17 : 1.,
18 : 1.,
19 : 1.,
20 : 1.}

smearingsigma = 8.
z = 4.5

bins = range(-75,76,1)
PSF  = [ [.5 / math.pi / ( x**2 + y**2 + z**2 )**1.5 for y in bins ] for x in bins ]
G    = [ [ 1./( smearingsigma * math.sqrt(2*math.pi) ) * math.exp( - 0.5 * (x**2 + y**2) / smearingsigma**2)  for y in bins ] for x in bins ]
PSFT = FT(PSF)
GT   = FT( G )

GPSFT = Sequences.Divide( GT, PSFT )
